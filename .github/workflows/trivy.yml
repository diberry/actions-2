name: Trivy image scans
# touch
on:
  workflow_dispatch:
    inputs:
      repoOwner:
        description: 'Repository owner'
        required: true
        type: string
      repoName:
        description: 'Repository name'
        required: true
        type: string
      runId:
        description: 'Unique identifier for the workflow run (for tracking purposes)'
        required: true
        type: string
        default: ''

permissions:
  contents: read
  security-events: write # Required for uploading Trivy scan results to GitHub Security tab
  actions: read # To read workflow run status


jobs:
  build:
    name: Build
    runs-on: ubuntu-24.04
    steps:

      - name: Debug log file
        run: |
          echo "Contents of trivy.log:"
          cat trivy.log || echo "trivy.log not found"

      - name: Validate inputs
        run: |
          if [ -z "${{ github.event.inputs.repoOwner }}" ]; then
            echo "Error: repoOwner input is required."
            exit 1
          fi
          if [ -z "${{ github.event.inputs.repoName }}" ]; then
            echo "Error: repoName input is required."
            exit 1
          fi
          if [ -z "${{ github.event.inputs.runId }}" ]; then
            echo "Error: runId input is required."
            exit 1
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.repoOwner }}/${{ github.event.inputs.repoName }}
        continue-on-error: false

      - name: Install required tools
        run: |
          echo "Installing required tools..." >> trivy.log
          sudo apt-get update
          sudo apt-get install -y ripgrep jq
          echo "Required tools installed." >> trivy.log

      - name: Remove old files
        run: |
          set -euo pipefail
          echo "Removing old files..." >> trivy.log
          rm -f candidate_files.txt files_with_images.txt tmp_images images.txt || true
          echo "Old files removed." >> trivy.log


      - name: Init scan log
        run: |
          echo "Trivy scan started: $(date -u)" >> trivy.log
          # log incoming workflow_dispatch inputs individually
          echo "repo_owner=${{ github.event.inputs.repoOwner }}" >> trivy.log
          echo "repo_name=${{ github.event.inputs.repoName }}" >> trivy.log
          echo "repo=${{ github.event.inputs.repoOwner }}/${{ github.event.inputs.repoName }}" >> trivy.log
          echo "run_id=${{ github.event.inputs.runId }}" >> trivy.log


      - name: Find candidate files by filename patterns
        run: |
          echo "Finding candidate files by filename patterns..." >> trivy.log
          find . -type f \( \
            -iname 'Dockerfile*' -o \
            -iname '*docker-compose*.yml' -o \
            -iname '*docker-compose*.yaml' -o \
            -path './.devcontainer/*' -o \
            -iname '*.devcontainer.json' -o \
            -iname '*.bicep' -o \
            -iname '*.tf' -o \
            -iname '*.yaml' -o \
            -iname '*.yml' \
          \) -not -path './.git/*' -print > candidate_files.txt || true
          echo "Candidate file search completed." >> trivy.log

      - name: Log candidate files
        run: |
          echo "Logging candidate files..." >> trivy.log
          echo "candidate_files_count=$(wc -l < candidate_files.txt 2>/dev/null || echo 0)" >> trivy.log
          echo "candidate_files:" >> trivy.log
          if [ -s candidate_files.txt ]; then
            sed 's/^/ - /' candidate_files.txt >> trivy.log
          else
            echo " - (none)" >> trivy.log
          fi
          echo "Candidate files logged." >> trivy.log

      - name: Filter candidate files for image-like content
        run: |
          echo "Filtering candidate files for image-like content..." >> trivy.log
          while IFS= read -r f; do
            # Skip if empty
            [ -z "$f" ] && continue

            echo "Processing file: $f" >> trivy.log

            # Check for common hints: 'image:' key, FROM lines, or any registry-looking token
            if rg -n --hidden --no-ignore-vcs --glob '!.git/**' -e '^\s*image\s*:' -e '^\s*FROM\s+' -e '([a-z0-9.-]+(?::[0-9]+)?/)[A-Za-z0-9._/-]+' "$f" > /dev/null 2>&1; then
              echo "File contains image-like content: $f" >> trivy.log
              echo "$f" >> files_with_images.txt
            else
              echo "No image-like content found in file: $f" >> trivy.log
            fi
          done < candidate_files.txt || true
          echo "Filtering completed." >> trivy.log



      - name: Extract image values from .devcontainer.json files
        run: |
          echo "Extracting image values from .devcontainer.json files..." >> trivy.log
          # Find all .devcontainer.json files
          find . -type f -name 'devcontainer.json' -o -path '**/.devcontainer/devcontainer.json' -not -path './.git/*' > devcontainer_files.txt || true

          # Check if any .devcontainer.json files were found
          if [ -s devcontainer_files.txt ]; then
            echo "Found devcontainer.json files:" >> trivy.log
            cat devcontainer_files.txt >> trivy.log
            while IFS= read -r file; do
              echo "Scanning file: $file" >> trivy.log
              # Extract the "image" value from the JSON file
              # Only accept image values that look like Docker images
              jq -r '.image // empty' "$file" | grep -E '^[a-z0-9]+(([._-][a-z0-9]+)+)?(:[0-9]+)?/[a-z0-9]+(([._-][a-z0-9]+)+)?:[a-z0-9]+([\._-][a-z0-9]+)*$|^[a-z0-9]+(([._-][a-z0-9]+)+)?:[a-z0-9]+([\._-][a-z0-9]+)*$' >> tmp_images || true
            done < devcontainer_files.txt
          else
            echo "No devcontainer.json files found." >> trivy.log
          fi

          echo "Image extraction from .devcontainer.json files completed." >> trivy.log

      - name: Debug .devcontainer.json parsing
        run: |
          echo "Debugging .devcontainer.json parsing..." >> trivy.log
          while IFS= read -r file; do
            echo "Scanning file: $file" >> trivy.log
            jq -r '.image // empty' "$file" >> trivy.log || echo "jq failed for $file" >> trivy.log
          done < devcontainer_files.txt
          echo "Debugging completed." >> trivy.log


      - name: Extract image values from Dockerfiles
        run: |
          echo "Extracting image values from Dockerfiles..." >> trivy.log
          # Find all Dockerfiles
          find . -type f -iname 'Dockerfile*' -not -path './.git/*' > dockerfile_files.txt || true

          # Log the found Dockerfiles
          echo "Found Dockerfiles:" >> trivy.log
          if [ -s dockerfile_files.txt ]; then
            cat dockerfile_files.txt >> trivy.log
          else
            echo "No Dockerfiles found." >> trivy.log
          fi

          # Extract "FROM" values and filter for valid Docker image formats
          if [ -s dockerfile_files.txt ]; then
            while IFS= read -r file; do
              echo "Scanning file: $file" >> trivy.log
              rg -o '^\s*FROM\s+[^\s]+' "$file" --hidden --no-ignore-vcs 2>/dev/null \
                | sed -E 's/^\s*FROM\s+//' \
                | sed -E 's/\s+AS\s+.*//' \
                | grep -E '^[a-z0-9]+(([._-][a-z0-9]+)+)?(:[0-9]+)?/[a-z0-9]+(([._-][a-z0-9]+)+)?:[a-z0-9]+([\._-][a-z0-9]+)*$|^[a-z0-9]+(([._-][a-z0-9]+)+)?:[a-z0-9]+([\._-][a-z0-9]+)*$' >> tmp_images || true
            done < dockerfile_files.txt
          fi

          echo "Image extraction from Dockerfiles completed." >> trivy.log

      - name: Debug Dockerfile parsing
        run: |
          echo "Debugging Dockerfile parsing..." >> trivy.log
          while IFS= read -r file; do
            echo "Scanning file: $file" >> trivy.log
            rg -o '^\s*FROM\s+[^\s]+' "$file" --hidden --no-ignore-vcs 2>>trivy.log \
              | sed -E 's/^\s*FROM\s+//' \
              | sed -E 's/\s+AS\s+.*//' >> trivy.log || echo "rg failed for $file" >> trivy.log
          done < dockerfile_files.txt
          echo "Debugging completed." >> trivy.log


      - name: Extract image values from Docker Compose files
        run: |
          echo "Extracting image values from Docker Compose files..." >> trivy.log
          # Find all Docker Compose files
          find . -type f \( -iname '*docker-compose*.yml' -o -iname '*docker-compose*.yaml' \) -not -path './.git/*' > docker_compose_files.txt || true

          # Log the found Docker Compose files
          echo "Found Docker Compose files:" >> trivy.log
          if [ -s docker_compose_files.txt ]; then
            cat docker_compose_files.txt >> trivy.log
          else
            echo "No Docker Compose files found." >> trivy.log
          fi

          # Extract "image" values and filter for valid Docker image formats
          if [ -s docker_compose_files.txt ]; then
            while IFS= read -r file; do
              echo "Scanning file: $file" >> trivy.log
              # Extract the "image" values from the YAML file
              rg -o '^\s*image:\s*[^\s]+' "$file" --hidden --no-ignore-vcs 2>/dev/null \
                | sed -E 's/^\s*image:\s*//' \
                | grep -E '^[a-z0-9]+(([._-][a-z0-9]+)+)?(:[0-9]+)?/[a-z0-9]+(([._-][a-z0-9]+)+)?:[a-z0-9]+([\._-][a-z0-9]+)*$|^[a-z0-9]+(([._-][a-z0-9]+)+)?:[a-z0-9]+([\._-][a-z0-9]+)*$' >> tmp_images || true
            done < docker_compose_files.txt
          fi

          echo "Image extraction from Docker Compose files completed." >> trivy.log

      - name: Extract image tokens from discovered files
        run: |
          echo "Extracting image tokens from discovered files..." >> trivy.log
          while IFS= read -r f; do
            [ -z "$f" ] && continue
            echo "Scanning file: $f" >> trivy.log
            # main registry/image[:tag] or @sha256:digest regex with more strict filtering
            rg -o '([a-z0-9.-]+(?::[0-9]+)?/)?[A-Za-z0-9._/-]+(?::[A-Za-z0-9._-]+|@sha256:[a-f0-9]{64})' --hidden --no-ignore-vcs "$f" \
              | grep -E '^[a-z0-9]+(([._-][a-z0-9]+)+)?(:[0-9]+)?/[a-z0-9]+(([._-][a-z0-9]+)+)?:[a-z0-9]+([\._-][a-z0-9]+)*$|^[a-z0-9]+(([._-][a-z0-9]+)+)?:[a-z0-9]+([\._-][a-z0-9]+)*$' >> tmp_images || true
            
            # Also extract FROM tokens in Dockerfiles with stricter filtering
            rg -o '^\s*FROM\s+[^\s]+' "$f" --hidden --no-ignore-vcs 2>/dev/null \
              | sed -E 's/^\s*FROM\s+//' \
              | sed -E 's/\s+AS\s+.*//' \
              | grep -E '^[a-z0-9]+(([._-][a-z0-9]+)+)?(:[0-9]+)?/[a-z0-9]+(([._-][a-z0-9]+)+)?:[a-z0-9]+([\._-][a-z0-9]+)*$|^[a-z0-9]+(([._-][a-z0-9]+)+)?:[a-z0-9]+([\._-][a-z0-9]+)*$' >> tmp_images || true
            
            # Extract image values from YAML with stricter filtering
            rg -o 'image:\s*[A-Za-z0-9._/-:@]+' "$f" --hidden --no-ignore-vcs 2>/dev/null \
              | sed -E 's/^image:\s*//' \
              | grep -E '^[a-z0-9]+(([._-][a-z0-9]+)+)?(:[0-9]+)?/[a-z0-9]+(([._-][a-z0-9]+)+)?:[a-z0-9]+([\._-][a-z0-9]+)*$|^[a-z0-9]+(([._-][a-z0-9]+)+)?:[a-z0-9]+([\._-][a-z0-9]+)*$' >> tmp_images || true
          done < files_with_images.txt || true
          echo "Image token extraction completed." >> trivy.log

      - name: Dedupe and write final images.txt
        run: |
          echo "Deduplicating and writing final images.txt..." >> trivy.log
          if [ -f tmp_images ]; then
            sort -u tmp_images > images.txt || true
          else
            touch images.txt
          fi
          echo "Final images.txt written." >> trivy.log

      - name: Log final counts
        run: |
          echo "Logging final counts..." >> trivy.log
          found_count=0
          if [ -f images.txt ]; then
            found_count=$(wc -l < images.txt || echo 0)
          fi
          images_in_files_count=0
          if [ -f files_with_images.txt ]; then
            images_in_files_count=$(wc -l < files_with_images.txt || echo 0)
          fi

          echo "files_found=${images_in_files_count}" >> $GITHUB_OUTPUT
          echo "found=${found_count}" >> $GITHUB_OUTPUT

          echo "files_with_images=$(wc -l < files_with_images.txt 2>/dev/null || echo 0)" >> trivy.log
          echo "found_images_file=$(wc -l < images.txt 2>/dev/null || echo 0)" >> trivy.log
          echo "Final counts logged." >> trivy.log

          if [ "$found_count" -eq 0 ] || [ "$images_in_files_count" -eq 0 ]; then
            echo "Error: No files or images found. Stopping the workflow after uploading the log." >> trivy.log
            echo "stop_workflow=true" >> $GITHUB_ENV
          fi

      - name: Debug stop_workflow variable
        run: |
          echo "stop_workflow==${{ env.stop_workflow }}"

      - name: Upload log artifact
        if: env.stop_workflow == true
        uses: actions/upload-artifact@v4
        with:
          name: trivy-log
          path: |
            trivy.log
            candidate_files.txt
            files_with_images.txt

      - name: Stop workflow if no files or images found
        if: env.stop_workflow == true
        run: |
          echo "Stopping workflow as no files or images were found."
          exit 0

      - name: Log found images
        run: |
          # record both the step output and the actual images.txt line count
          echo "found_images_output=${{ steps.find-images.outputs.found }}" >> trivy.log
          echo "found_files_output=${{ steps.find-images.outputs.files_found }}" >> trivy.log
          echo "found_images_file=$(wc -l < images.txt)" >> trivy.log
          
          # Log the actual images for visibility in both run output and log file
          echo "==== Found Docker Images ====" | tee -a trivy.log
          if [ -s images.txt ]; then
            cat images.txt | tee -a trivy.log
          else
            echo "No Docker images found." | tee -a trivy.log
          fi
          echo "===========================" | tee -a trivy.log

      - name: Install Trivy CLI
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Init scan log
        if: steps.find-images.outputs.found != '0'
        run: |
          echo "Trivy scan started: $(date -u)" > trivy.log
          echo "repo=${{ github.event.inputs.repoOwner }}/${{ github.event.inputs.repoName }}" >> trivy.log
          echo "run_id=${{ github.event.inputs.runId }}" >> trivy.log
          echo "found_images=$(wc -l < images.txt)" >> trivy.log

      - name: Scan discovered images
        if: steps.find-images.outputs.found != '0'
        run: |
          mkdir -p trivy-output
          while IFS= read -r img; do
            # sanitize name for filename (replace /:@sha256 etc)
            file=$(echo "$img" | sed -E 's/[^A-Za-z0-9._-]/_/g')
            echo "Scanning $img -> trivy-output/${file}.json" | tee -a trivy.log
            if trivy image --quiet --format json -o "trivy-output/${file}.json" "$img"; then
              echo "SUCCESS: $img" >> trivy.log
            else
              echo "FAILED: $img" >> trivy.log
              echo "scan failed for $img" > "trivy-output/${file}.scan_error"
              echo "scan failed for $img" >> trivy.log
            fi
          done < images.txt

      - name: Create combined summary.json
        if: steps.find-images.outputs.found != '0'
        run: |
          mkdir -p combined
          echo "Generating summary at $(date -u)" >> trivy.log
          # attempt to build an aggregated summary; log jq output & errors
          if jq -s 'def allv: (map(.Results // []) | map(.[] | .Vulnerabilities // []) | add // []); {
            total: (allv | length),
            by_severity: (allv | group_by(.Severity) | map({(.[0].Severity): length}) | add // {}),
            per_file: (map({file: input_filename, total: ((.Results[]?.Vulnerabilities // []) | length)}) )
          }' trivy-output/*.json > summary.json 2>> trivy.log; then
            echo "Summary generated: $(wc -c < summary.json) bytes" >> trivy.log
          else
            echo "Summary generation failed; writing default summary" >> trivy.log
            echo '{"total":0}' > summary.json
          fi

      - name: Upload Trivy outputs artifacts
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scans-${{ github.run_id }}
          path: |
            trivy-output/
            summary.json
            images.txt
            trivy.log
            candidate_files.txt
            files_with_images.txt